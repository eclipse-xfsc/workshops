version: '3.9'
networks:
  internal:
    driver: bridge
  resolver:
    driver: bridge
  external:
    driver: bridge

volumes:
  shared_volume:
  hydra-sqlite:
  redis:
    driver: local

services:
  cassandra:
    container_name: $PROJECT_NAME-cassandra
    image: cassandra:latest
    restart: always
    hostname: cassandra
    ports:
      - "9042:9042"
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 10

  initialize_cassandra:
    image: nuvo/docker-cqlsh
    command: cqlsh -f /cql/initialize.cql --cqlversion="3.4.7"
    networks:
      - internal
    environment:
      CQLSH_PORT: 9042
      CQLVERSION: 3.4.7
    volumes:
      - "./scripts/cql/initialize.cql:/cql/initialize.cql"
    depends_on:
      cassandra:
        condition: service_healthy

  nats:
    networks:
      - internal
      
    image: nats:2.10.10
    ports:
      - 4222:4222
      - 8222:8222

  vault:
    image: hashicorp/vault
    ports:
      - 8200:8200
    networks:
      - internal
      
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=test
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'VAULT_ADDR=http://vault:8200 vault status'"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  vault-init:
    # to create a new key // curl --header "X-Vault-Token: test" --request POST --data @keyConfig.json http://localhost:8200/v1/tenant_space/keys/signerkey
    # retrieve a key backup and save it to signerkey.json // curl --header "X-Vault-Token: test" --request GET  http://localhost:8200/v1/tenant_space/backup/signerkey
    image: curlimages/curl:latest
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - internal
    volumes:
      - ./scripts/vault/init-keys.sh:/vault-scripts/init-keys.sh
      - ./scripts/vault/signerkey.json:/vault-scripts/signerkey.json
    command: ["/vault-scripts/init-keys.sh"]

  postgres:
    image: postgres:14-alpine
    networks:
      - internal
      
    ports:
      - 5432:5432
    volumes:
#      - ./data:/var/lib/postgresql/data
     - ./scripts/sql:/docker-entrypoint-initdb.d

    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres

    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
      interval: 10s
      timeout: 3s
      retries: 3

  redis:
    image: redis:6.2-alpine
    networks:
        - internal
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass redis
    volumes:
      - redis:/data

  hydra:
    image: oryd/hydra:v2.2.0-rc.3
    ports:
      - "4444:4444" # Public port
      - "4445:4445" # Admin port
      - "5555:5555" # Port for hydra token user
    command: serve -c /etc/config/hydra/hydra.yml all --dev
    volumes:
      - type: volume
        source: hydra-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: ./hydra
        target: /etc/config/hydra
    environment:
      - DSN=postgres://hydra:secret@postgres:5432/hydra?sslmode=disable&max_conns=20&max_idle_conns=4
      - SECRETS_SYSTEM=myhydrasecret12345
      - URLS_SELF_ISSUER=http://hydra:4444
      - URLS_CONSENT=http://consent:3000/consent
      - URLS_LOGIN=http://consent:3000/login
      - SERVE_PUBLIC_CORS_ENABLED=false
      - SERVE_PUBLIC_CORS_ALLOWED_ORIGINS=http://localhost:3000
      - LOG_LEVEL=debug
      - LOG_LEAK_SENSITIVE_VALUES=true
      - OAUTH2_ACCESS_TOKEN_STRATEGY=jwt

    restart: unless-stopped
    depends_on:
      hydra-migrate:
        condition: service_completed_successfully
    networks:
      - internal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://host.docker.internal:4444/.well-known/openid-configuration"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 2s

  hydra-client-setup:
    image: oryd/hydra:v2.2.0-rc.3
    networks:
      - internal
    depends_on:
      hydra:
        condition: service_healthy
    entrypoint: /bin/sh
#    command: echo 'starting hydra client setup' && CLIENT_INFO=$$(hydra create client --endpoint http://hydra:4445 --name bridge --secret secret --grant-type client_credential --response-type token,code --scope openid,offline --token-endpoint-auth-method client_secret_post --format json) && echo $$CLIENT_INFO | jq -r .client_id > /shared/client_id.txt && echo 'Client created successfully. CLIENT_ID saved to /client_id/hydra_client_id.txt'
    command: >
      -c "
      echo 'Starting hydra client setup' &&
      CLIENT_INFO=$$(hydra create client --endpoint http://hydra:4445 --name bridge --secret secret --grant-type client_credentials --response-type token,code --scope openid,offline --token-endpoint-auth-method client_secret_post --format json) &&
      CLIENT_ID=$$(echo \"$$CLIENT_INFO\" | sed -n 's/.*\"client_id\":\"\\([^\"]*\\)\".*/\\1/p') &&
      echo \"PREAUTHBRIDGE_OAUTH_CLIENTID=$$CLIENT_ID\" > /shared/client_id.env &&
      if [ $$? -eq 0 ]; then
        echo 'Client created successfully. CLIENT_ID saved to /shared/client_id.env'
        cat /shared/client_id.env
      else
        echo 'Failed to create client or save CLIENT_ID'
        exit 1
      fi &&
      echo \"PREAUTHBRIDGE_OAUTH_SERVERURL=http://host.docker.internal:4444/oauth2/token\" >> /shared/client_id.env
      "
    volumes:
      - ./shared:/shared

  hydra-migrate:
    image: oryd/hydra:v2.2.0-rc.3
    environment:
      - DSN=postgres://hydra:secret@postgres:5432/hydra?sslmode=disable&max_conns=20&max_idle_conns=4
    command: migrate -c /etc/config/hydra/hydra.yml sql -e --yes
    volumes:
      - type: volume
        source: hydra-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: ./hydra
        target: /etc/config/hydra
    restart: on-failure
    networks:
      - internal

  consent:
    environment:
      - HYDRA_ADMIN_URL=http://hydra:4445
    image: oryd/hydra-login-consent-node:v2.2.0-rc.3
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - internal

# microservices
  signer:
    image: node-654e3bca7fbeeed18f81d7c7.ps-xaas.io/tsa/signer:main
    ports:
      - 8080:8080
    networks:
      - internal
    depends_on:
      - sdjwt
    environment:
        SDJWT_SERVICE_URL: http://sdjwt:3000
        VAULT_ADRESS: http://vault:8200
        VAULT_TOKEN: test
        NATS_HOST: nats://nats:4222
        NATS_TOPIC: signer-topic
        NATS_STATUS_TOPIC: status.data.create
        NATS_STATUS_VERIFY_TOPIC: status.data.verify
        CLOUDEVENTPROVIDER_MESSAGING_PROTOCOL: nats
        CLOUDEVENTPROVIDER_MESSAGING_NATS_URL: nats:4222
        ENGINE_PATH: /opt/plugins/hashicorp-vault-provider.so

  credential-retrieval-service:
    image:  node-654e3bca7fbeeed18f81d7c7.ps-xaas.io/ocm-wstack/credential-retrieval-service:main
    networks:
      - internal
    ports:
      - 8000:8000
    depends_on:
      cassandra:
        condition: service_healthy
      initialize_cassandra:
        condition: service_completed_successfully
      nats:
        condition: service_started
    environment:
      CREDENTIALRETRIEVAL_CASSANDRA_HOST: cassandra:9042
      CREDENTIALRETRIEVAL_CASSANDRA_KEYSPACE: tenant_space
      CREDENTIALRETRIEVAL_CASSANDRA_PASSWORD: cassandra
      CREDENTIALRETRIEVAL_CASSANDRA_USER: cassandra
      CREDENTIALRETRIEVAL_COUNTRY: DE
      CREDENTIALRETRIEVAL_DISABLETLS: "true"
      CREDENTIALRETRIEVAL_LISTEN_ADDR: 0.0.0.0
      CREDENTIALRETRIEVAL_LISTEN_PORT : 8000
      CREDENTIALRETRIEVAL_METADATAPOLICY:
      CREDENTIALRETRIEVAL_NATS_QUEUE_GROUP: offering
      CREDENTIALRETRIEVAL_NATS_REQUEST_TIMEOUT: 10s
      CREDENTIALRETRIEVAL_NATS_URL: nats://nats:4222
      CREDENTIALRETRIEVAL_OFFERINGPOLICY :
      CREDENTIALRETRIEVAL_OFFERING_TOPIC: offering
      CREDENTIALRETRIEVAL_REGION: EU
      CREDENTIALRETRIEVAL_SIGNER_TOPIC: signer-topic
      CREDENTIALRETRIEVAL_STORING_TOPIC: storage

  issuance_service:
    image: node-654e3bca7fbeeed18f81d7c7.ps-xaas.io/ocm-wstack/issuance-service:main
    networks:
      - internal
    ports:
      - 8082:8082
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
    environment:
      ISSUANCE_AUDIENCE :
      ISSUANCE_JWKSURL : http://host.docker.internal:4444/.well-known/jwks.json
      ISSUANCE_LISTEN_ADDR : 0.0.0.0
      ISSUANCE_LISTEN_PORT : 8082
      ISSUANCE_NATS_URL : nats://nats:4222

  well_known_service:
    image: node-654e3bca7fbeeed18f81d7c7.ps-xaas.io/ocm-wstack/well-known-service:main
    networks:
      - internal
    ports:
      - 8084:8084

    depends_on:
      postgres:
        condition: service_healthy

    environment:
      WELLKNOWN_SERVICE_LOG_LEVEL: INFO
      WELLKNOWN_SERVICE_IS_DEV: "false"
      WELLKNOWN_SERVICE_LISTEN_ADDR: 0.0.0.0
      WELLKNOWN_SERVICE_LISTEN_PORT: 8084
      WELLKNOWN_SERVICE_POSTGRES_HOST: postgres
      WELLKNOWN_SERVICE_POSTGRES_PORT: 5432
      WELLKNOWN_SERVICE_POSTGRES_DATABASE: postgres
      WELLKNOWN_SERVICE_POSTGRES_USER: postgres
      WELLKNOWN_SERVICE_POSTGRES_PASSWORD: postgres
      WELLKNOWN_SERVICE_POSTGRES_PARAMS: "sslmode:disable"
      WELLKNOWN_SERVICE_NATS_URL: nats
      WELLKNOWN_SERVICE_NATS_QUEUE_GROUP: wellknown
      WELLKNOWN_SERVICE_NATS_REQUEST_TIMEOUT: 10s
      WELLKNOWN_SERVICE_OPEN_ID_ISSUER: dummycontentsigner
      WELLKNOWN_SERVICE_CREDENTIAL_ISSUER_IMPORTER: BROADCAST
      WELLKNOWN_SERVICE_CREDENTIAL_GIT_IMAGE_PATH:
      WELLKNOWN_SERVICE_CREDENTIAL_GIT_REPO:
      WELLKNOWN_SERVICE_CREDENTIAL_GIT_TOKEN:
      WELLKNOWN_SERVICE_CREDENTIAL_GIT_INTERVAL: ""

  sdjwt:
    image: node-654e3bca7fbeeed18f81d7c7.ps-xaas.io/common-services/sdjwt-service:main
    networks:
      - internal
    ports:
      - 8087:3000
    environment:
      LOG_LEVEL: INFO 
      PORT: 3000
      SIGNER_SIGN_URL: http://host.docker.internal:8080/v1/sign
      RESOLVER_URL: http://resolver:8080/1.0/identifiers/
  storage:
    image: node-654e3bca7fbeeed18f81d7c7.ps-xaas.io/ocm-wstack/storage-service:main
    networks:
      - internal
    ports:
      - 8085:8085
    depends_on:
      cassandra:
        condition: service_healthy
      nats:
        condition: service_started
      initialize_cassandra:
        condition: service_completed_successfully
    environment:
      LISTEN_ADDR: 0.0.0.0
      LISTEN_PORT: 8085
      LOG_LEVEL: DEBUG
      STORAGESERVICE_LOG_LEVEL: DEBUG
      STORAGESERVICE_LOGLEVEL: DEBUG
      STORAGESERVICE_CASSANDRA_HOST: host.docker.internal:9042
      STORAGESERVICE_CASSANDRA_KEYSPACE: tenant_space
      STORAGESERVICE_CASSANDRA_PASSWORD: cassandra
      STORAGESERVICE_CASSANDRA_USER: cassandra
      STORAGESERVICE_COUNTRY: DE
      STORAGESERVICE_CRYPTO_NAMESPACE: transit
      STORAGESERVICE_CRYPTO_SIGNKEY: test
      STORAGESERVICE_MESSAGING_ENABLED: true
      STORAGESERVICE_MESSAGING_QUEUEGROUP: storage-service
      STORAGESERVICE_MESSAGING_STORAGETOPIC: storage
      STORAGESERVICE_MESSAGING_URL: host.docker.internal:4222
      STORAGESERVICE_MODE: DIRECT
      STORAGESERVICE_PROFILE: DEBUG,API
      STORAGESERVICE_REGION: EU
      VAULT_ADRESS: http://vault:8200
      VAULT_TOKEN: test